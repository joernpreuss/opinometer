"""Initial migration

Revision ID: 0001
Revises:
Create Date: 2025-09-27 00:07:18.441607

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0001"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "search_queries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("query", sqlmodel.AutoString(length=200), nullable=False),
        sa.Column(
            "analysis_method",
            sqlmodel.AutoString(length=50),
            nullable=False,
        ),
        sa.Column("total_posts", sa.Integer(), nullable=False),
        sa.Column("reddit_posts", sa.Integer(), nullable=False),
        sa.Column("hackernews_posts", sa.Integer(), nullable=False),
        sa.Column("avg_sentiment", sa.Numeric(precision=4, scale=3), nullable=True),
        sa.Column(
            "detailed_stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "executed_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_search_queries_query"), "search_queries", ["query"], unique=False
    )
    op.create_table(
        "posts",
        sa.Column("id", sqlmodel.AutoString(length=50), nullable=False),
        sa.Column("search_query_id", sa.Integer(), nullable=False),
        sa.Column("title", sqlmodel.AutoString(), nullable=False),
        sa.Column("source", sqlmodel.AutoString(length=20), nullable=False),
        sa.Column("community", sqlmodel.AutoString(length=100), nullable=True),
        sa.Column("score", sa.Integer(), nullable=False),
        sa.Column("created_utc", sa.DateTime(), nullable=True),
        sa.Column("raw_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "collected_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["search_query_id"],
            ["search_queries.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_posts_community"), "posts", ["community"], unique=False)
    op.create_index(
        op.f("ix_posts_created_utc"), "posts", ["created_utc"], unique=False
    )
    op.create_index(op.f("ix_posts_score"), "posts", ["score"], unique=False)
    op.create_index(
        op.f("ix_posts_search_query_id"), "posts", ["search_query_id"], unique=False
    )
    op.create_index(op.f("ix_posts_source"), "posts", ["source"], unique=False)
    op.create_index(op.f("ix_posts_title"), "posts", ["title"], unique=False)
    op.create_table(
        "content",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("post_id", sqlmodel.AutoString(length=50), nullable=False),
        sa.Column("fetch_success", sa.Boolean(), nullable=False),
        sa.Column("content_length", sa.Integer(), nullable=True),
        sa.Column(
            "fetched_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "fetch_details", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["posts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_content_fetch_success"), "content", ["fetch_success"], unique=False
    )
    op.create_index(
        op.f("ix_content_fetched_at"), "content", ["fetched_at"], unique=False
    )
    op.create_index(op.f("ix_content_post_id"), "content", ["post_id"], unique=False)
    op.create_table(
        "sentiment_analyses",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("post_id", sqlmodel.AutoString(length=50), nullable=False),
        sa.Column("content_id", sa.Integer(), nullable=True),
        sa.Column(
            "analysis_method",
            sqlmodel.AutoString(length=50),
            nullable=False,
        ),
        sa.Column("title_compound", sa.Numeric(precision=4, scale=3), nullable=True),
        sa.Column("title_label", sqlmodel.AutoString(length=10), nullable=True),
        sa.Column("content_compound", sa.Numeric(precision=4, scale=3), nullable=True),
        sa.Column("content_label", sqlmodel.AutoString(length=10), nullable=True),
        sa.Column("claude_version", sqlmodel.AutoString(length=20), nullable=True),
        sa.Column(
            "full_results", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "analyzed_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["content_id"],
            ["content.id"],
        ),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["posts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_sentiment_analyses_analysis_method"),
        "sentiment_analyses",
        ["analysis_method"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sentiment_analyses_analyzed_at"),
        "sentiment_analyses",
        ["analyzed_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sentiment_analyses_content_id"),
        "sentiment_analyses",
        ["content_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sentiment_analyses_post_id"),
        "sentiment_analyses",
        ["post_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sentiment_analyses_title_compound"),
        "sentiment_analyses",
        ["title_compound"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sentiment_analyses_title_label"),
        "sentiment_analyses",
        ["title_label"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_sentiment_analyses_title_label"), table_name="sentiment_analyses"
    )
    op.drop_index(
        op.f("ix_sentiment_analyses_title_compound"), table_name="sentiment_analyses"
    )
    op.drop_index(
        op.f("ix_sentiment_analyses_post_id"), table_name="sentiment_analyses"
    )
    op.drop_index(
        op.f("ix_sentiment_analyses_content_id"), table_name="sentiment_analyses"
    )
    op.drop_index(
        op.f("ix_sentiment_analyses_analyzed_at"), table_name="sentiment_analyses"
    )
    op.drop_index(
        op.f("ix_sentiment_analyses_analysis_method"), table_name="sentiment_analyses"
    )
    op.drop_table("sentiment_analyses")
    op.drop_index(op.f("ix_content_post_id"), table_name="content")
    op.drop_index(op.f("ix_content_fetched_at"), table_name="content")
    op.drop_index(op.f("ix_content_fetch_success"), table_name="content")
    op.drop_table("content")
    op.drop_index(op.f("ix_posts_title"), table_name="posts")
    op.drop_index(op.f("ix_posts_source"), table_name="posts")
    op.drop_index(op.f("ix_posts_search_query_id"), table_name="posts")
    op.drop_index(op.f("ix_posts_score"), table_name="posts")
    op.drop_index(op.f("ix_posts_created_utc"), table_name="posts")
    op.drop_index(op.f("ix_posts_community"), table_name="posts")
    op.drop_table("posts")
    op.drop_index(op.f("ix_search_queries_query"), table_name="search_queries")
    op.drop_table("search_queries")
    # ### end Alembic commands ###
